<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.human.camping.dao.MemberDAO">
<!-- namespace를 인터페이스 이름과 일치 시켜야 한다. -->
	
	<!-- 1. 회원가입 회원정보 저장 -->
	<insert id="insert" parameterType="MemberVO">
		insert into member(idx, id, password, name, phone, email, gender) 
		values(member_idx_seq.nextval,#{id},#{password},#{name},#{phone},#{email},#{gender})
	</insert>

	<!-- 2. 회원 정보 수정 -->
	<update id="update" parameterType="MemberVO">
		update member set <if test="password != null||password !=''">password = #{password},</if> name = #{name}, email = #{email}, gender = #{gender}, phone = #{phone}
		where id=#{id}
	</update>

	<!-- 3. 회원 탈퇴 -->
	<delete id="delete" parameterType="MemberVO">
		delete from member where id=#{id}
	</delete>
	
	<!-- 4. 회원정보 가져오기 -->
	<select id="selectByMemberInfo" parameterType="string" resultType="MemberVO">
		select m.*, ml.ROLE role from MEMBER m JOIN member_role ml ON m.id = ml.id where m.id=#{id}
	</select>
	
	<!-- 5. 전체 회원 리스트 가져오기 -->
	<select id="selectByMemberInfoList" resultType="MemberVO">
		select * from member where id = (select id from member_role where role='user')
	</select>
	
	<!-- 6. 사용자 권한 확인하기 -->
	<select id="checkAccess" parameterType="MemberVO" resultType="string">
		select role from member_role where id = #{id}
	</select>
	
	<!-- 7. 사용자 권한 생성 -->
	<insert id="insertAccess" parameterType="MemberVO">
		insert into member_role(idx, id, Role) values(member_role_idx_seq.nextval, #{id}, 'unknown')
	</insert>
	
	<!-- 8. 로그인 -->
	<select id="login" parameterType="hashmap" resultType="int">
		select count(*) from member where #{password} = (select password from member where id = #{id})
	</select>
	
	<!-- 9. id중복 검사 -->
	<select id="IDOverlap" parameterType="string" resultType="int">
		select count(*) from member where id = #{id}
	</select>
	
	<!-- 10. email중복 검사 -->
	<select id="EmailOverlap" parameterType="string" resultType="int">
		select count(*) from member where email = #{email}
	</select>
	
	<!-- 11. id찾기 -->
	<select id="findID" parameterType="string" resultType="MemberVO">
		select * from member where email = #{email}
	</select>
	
	<!-- 12. password임시비번으로 교환 -->
	<update id="changePassword" parameterType="hashmap">
		update member set password = #{password} where email = #{email}
	</update>
	
	<!-- 13. 회원탈퇴시 권한 테이블에서 정보 삭제 -->
	<delete id="deleteAccess" parameterType="string">
		delete from member_role where id=#{id}
	</delete>
	
	
	<!-- 14. 인증후 권한 바꿔주기 -->
	<update id="updateAccess" parameterType="string">
		update member_role set role = 'user' where id = #{id}
	</update>
	
	
	
</mapper>